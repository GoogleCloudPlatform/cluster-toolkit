# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---

- name: "Setup Integration tests for HPC toolkit"
  hosts: localhost
  tasks:
  ## Create SSH Keys
  - name: "Create .ssh folder"
    ansible.builtin.file:
      path: "/builder/home/.ssh"
      state: directory
      mode: 0700

  - name: Create SSH Key
    community.crypto.openssh_keypair:
      path: "/builder/home/.ssh/id_rsa"

  ## Get builder IP address
  - name: Get Builder IP
    register: build_ip
    changed_when: false
    args:
      executable: /bin/bash
    ansible.builtin.shell: |
      set -e -o pipefail
      dig TXT +short o-o.myaddr.l.google.com @ns1.google.com | \
          awk -F'"' '{print $2}'

  ## Create cluster
  - name: Run Pre Create Tasks
    ansible.builtin.include_tasks: "{{ pre_create_task }}"
    loop: "{{ pre_create_tasks | default([]) }}"
    loop_control:
      loop_var: pre_create_task

  - name: Create Deployment Directory
    ansible.builtin.include_tasks:
      file: tasks/create_deployment_directory.yml

  - name: Create Infrastructure and test
    block:
    - name: Create Cluster with GHPC
      register: deployment
      changed_when: deployment.changed
      ansible.builtin.command: ./ghpc deploy {{ deployment_name }} --auto-approve
      args:
        chdir: "{{ workspace }}"
      environment:
        TF_IN_AUTOMATION: "TRUE"

    - name: Print instance IDs of VMs
      ansible.builtin.include_tasks:
        file: tasks/get_instance_ids.yml

    - name: Get IP of the remote node - Exact name provided
      changed_when: false
      register: get_remote_ip
      ansible.builtin.command: >-
        gcloud compute instances describe --zone={{ zone }} {{ remote_node }}
        --format='get(networkInterfaces[0].accessConfigs[0].natIP)'
      when: '"*" not in remote_node'

    # Setting a fact is needed because the variable will overwrite itself even
    # if a task is skipped, leading to an undefined variable when the exact name
    # is provided.
    - name: Set remote_ip variable - Exact name provided
      ansible.builtin.set_fact:
        remote_ip: "{{ get_remote_ip.stdout }}"
      when: '"*" not in remote_node'

    - name: Get IP of the remote node - Name pattern provided
      changed_when: false
      register: get_remote_ip
      ansible.builtin.command: >-
        gcloud compute instances list \
          --format='get(networkInterfaces[0].accessConfigs[0].natIP)' --limit=1 \
          --filter=NAME:{{ remote_node }}
      when: '"*" in remote_node'

    - name: Set remote_ip variable - Name pattern provided
      ansible.builtin.set_fact:
        remote_ip: "{{ get_remote_ip.stdout }}"
      when: '"*" in remote_node'

    - name: Print remote node's public IP
      ansible.builtin.debug:
        var: remote_ip

    ## Setup firewall for cloud build
    - name: Create firewall rule
      register: fw_result
      changed_when: fw_result.rc == 0
      ansible.builtin.command:
        argv:
        - gcloud
        - compute
        - --project={{ project }}
        - firewall-rules
        - create
        - "{{ deployment_name }}"
        - --direction=INGRESS
        - --priority=1000
        - --network={{ network }}
        - --action=ALLOW
        - --rules=tcp:22
        - --source-ranges={{ build_ip.stdout }}

    - name: 'Add SSH Keys to OS-Login'
      register: key_result
      changed_when: key_result.rc == 0
      ansible.builtin.command:
        argv:
        - gcloud
        - compute
        - os-login
        - ssh-keys
        - add
        - --ttl
        - 2h
        - "--key-file=/builder/home/.ssh/id_rsa.pub"

    - name: Add Remote node as host
      ansible.builtin.add_host:
        hostname: "{{ remote_ip }}"
        groups: [remote_host]
      when: remote_ip | ansible.utils.ipaddr

    - name: Wait for cluster
      ansible.builtin.wait_for_connection:

    ## Cleanup and fail gracefully
    rescue:
    - name: Capture ghpc stderr
      failed_when: false
      ansible.builtin.set_fact:
        ghpc_stderr: "{{ deployment.stderr | replace('\n',' ') }}"

    - name: Gather logs
      ansible.builtin.include_tasks:
        file: tasks/gather_startup_script_logs.yml
        apply:
          delegate_to: localhost

    - name: Include rescue from ghpc failure
      ansible.builtin.include_tasks:
        file: tasks/rescue_ghpc_failure.yml
        apply:
          delegate_to: localhost
      vars:
        deployment_name: "{{ deployment_name }}"
        workspace: "{{ workspace }}"

    - name: Trigger failure (rescue blocks otherwise revert failures)
      ansible.builtin.fail:
        msg: "Failed while setting up test infrastructure"

- name: Run Integration Tests
  hosts: remote_host
  vars:
    startup_timeout_seconds: 600  # 10 minutes
  gather_facts: false
  tasks:
  - name: Remote Test Block
    vars:
      ansible_ssh_private_key_file: "/builder/home/.ssh/id_rsa"

    block:
    - name: Include wait for startup script
      ansible.builtin.include_tasks: "tasks/wait-for-startup-script.yml"
      vars:
        timeout_seconds: "{{ startup_timeout_seconds }}"

    - name: Run Integration tests for HPC toolkit
      ansible.builtin.include_tasks: "{{ test }}"
      vars:
        remote_node: "{{ remote_node }}"
        deployment_name: "{{ deployment_name }}"
        custom_vars: "{{ custom_vars }}"
      loop: "{{ post_deploy_tests }}"
      loop_control:
        loop_var: test

    always:
    - name: Cleanup firewall and infrastructure
      ansible.builtin.include_tasks:
        file: tasks/rescue_ghpc_failure.yml
        apply:
          delegate_to: localhost
      vars:
        deployment_name: "{{ deployment_name }}"
        workspace: "{{ workspace }}"
