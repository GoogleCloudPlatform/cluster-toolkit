# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---

- name: "Setup Integration tests for HPC toolkit"
  hosts: localhost
  vars:
    scripts_dir: "{{ workspace }}/tools/cloud-build/daily-tests"
  tasks:
  ## Create SSH Keys
  - name: "Create .ssh folder"
    file:
      path: "/builder/home/.ssh"
      state: directory
      mode: 0700
  - name: Create SSH Key
    openssh_keypair:
      path: "/builder/home/.ssh/id_rsa"

  ## Create cluster
  - name: Create Deployment Directory
    command: "{{ scripts_dir }}/create_deployment.sh"
    environment:
      MAX_NODES: "{{ max_nodes }}"
      EXAMPLE_YAML: "{{ blueprint_yaml }}"
      PROJECT_ID: "{{ project }}"
      ROOT_DIR: "{{ workspace }}"
      BLUEPRINT_DIR: "{{ blueprint_dir }}"
      DEPLOYMENT_NAME: "{{ deployment_name }}"
      NETWORK: "{{ network }}"
    args:
      creates: "{{ workspace }}/{{ deployment_name }}.tgz"
  - name: Create Infrastructure and test
    block:
    - name: Create Cluster with Terraform
      command:
        cmd: "{{ item }}"
        chdir: "{{ workspace }}/{{ deployment_name }}/primary"
      args:
        creates: "{{ workspace }}/{{ deployment_name }}/.terraform"
      environment:
        TF_IN_AUTOMATION: "TRUE"
      with_items:
      - "terraform init"
      - "terraform apply -auto-approve -no-color"
    - name: Get login IP
      register: login_ip
      command: >-
        gcloud compute instances describe --zone={{ zone }} {{ login_node }}
        --format='get(networkInterfaces[0].accessConfigs[0].natIP)'
    - name: Get Controller IP
      register: controller_ip
      command: >-
        gcloud compute instances describe --zone={{ zone }} {{ controller_node }}
        --format='get(networkInterfaces[0].accessConfigs[0].natIP)'

    ## Setup firewall for cloud build
    - name: Get Builder IP
      shell: >-
        dig TXT +short o-o.myaddr.l.google.com @ns1.google.com |
         awk -F'"' '{print $2}'
      register: build_ip
    - name: Create firewall rule
      command:
        argv:
        - gcloud
        - compute
        - --project={{ project }}
        - firewall-rules
        - create
        - "{{ deployment_name }}"
        - --direction=INGRESS
        - --priority=1000
        - --network={{ network }}
        - --action=ALLOW
        - --rules=tcp:22
        - --source-ranges={{ build_ip.stdout }}
    - name: 'Add SSH Keys to OS-Login'
      command:
        argv:
        - gcloud
        - compute
        - os-login
        - ssh-keys
        - add
        - --ttl
        - 2h
        - "--key-file=/builder/home/.ssh/id_rsa.pub"
    - name: Add Login node as host
      add_host:
        hostname: "{{ login_ip.stdout }}"
        groups: [remote_host]
    - name: Wait for cluster
      wait_for_connection:

    ## Cleanup and fail gracefully
    rescue:
    - name: Delete Firewall Rule
      command:
        argv:
        - gcloud
        - compute
        - firewall-rules
        - delete
        - "{{ deployment_name }}"
      ignore_errors: true
    - name: Tear Down Cluster
      run_once: true
      delegate_to: localhost
      environment:
        TF_IN_AUTOMATION: "TRUE"
      command:
        cmd: terraform destroy -auto-approve
        chdir: "{{ workspace }}/{{ deployment_name }}/primary"
    - name: Fail Out
      fail:
        msg: "Failed while setting up test infrastructure"
      when: true

- name: Run Integration Tests
  hosts: remote_host
  gather_facts: false
  tasks:
  - name: Slurm Test Block
    vars:
      ansible_ssh_private_key_file: "/builder/home/.ssh/id_rsa"
    block:
    - name: Pause for 2 minutes to allow cluster setup
      pause:
        minutes: 2
    - name: Run Integration tests for HPC toolkit
      include_tasks: "{{ test }}"
      run_once: true
      vars:
        login_node: "{{ login_node }}"
        mounts: "{{ mounts }}"
        partitions: "{{ partitions }}"
      loop: "{{ post_deploy_tests }}"
      loop_control:
        loop_var: test

    ## Always cleanup, even on failure
    always:
    - name: Recover Resume Logs
      delegate_to: "{{ hostvars['localhost']['controller_ip']['stdout'] }}"
      command: cat /var/log/slurm/resume.log
      register: resume_output
      ignore_errors: true
    - debug:
        var: resume_output.stdout_lines

    - name: Recover Suspend Logs
      delegate_to: "{{ hostvars['localhost']['controller_ip']['stdout'] }}"
      command: cat /var/log/slurm/suspend.log
      register: suspend_output
      ignore_errors: true
    - debug:
        var: suspend_output.stdout_lines

    - name: Delete Firewall Rule
      run_once: true
      delegate_to: localhost
      command:
        argv:
        - gcloud
        - compute
        - firewall-rules
        - delete
        - "{{ deployment_name }}"
      ignore_errors: true
    - name: Tear Down Cluster
      run_once: true
      delegate_to: localhost
      environment:
        TF_IN_AUTOMATION: "TRUE"
      command:
        cmd: terraform destroy -auto-approve
        chdir: "{{ workspace }}/{{ deployment_name }}/primary"
