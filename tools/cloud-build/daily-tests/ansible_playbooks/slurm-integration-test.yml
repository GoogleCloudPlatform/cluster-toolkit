# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---

- name: "Setup Integration tests for HPC toolkit"
  hosts: localhost
  vars:
    scripts_dir: "{{ workspace }}/tools/cloud-build/daily-tests"
  tasks:
  ## Create SSH Keys
  - name: "Create .ssh folder"
    ansible.builtin.file:
      path: "/builder/home/.ssh"
      state: directory
      mode: 0700
  - name: Create SSH Key
    community.crypto.openssh_keypair:
      path: "/builder/home/.ssh/id_rsa"

  ## Create cluster
  - name: Create Deployment Directory
    ansible.builtin.command: "{{ scripts_dir }}/create_deployment.sh"
    environment:
      ALWAYS_RECOMPILE: "no"
      MAX_NODES: "{{ max_nodes }}"
      EXAMPLE_YAML: "{{ blueprint_yaml }}"
      PROJECT_ID: "{{ project }}"
      ROOT_DIR: "{{ workspace }}"
      DEPLOYMENT_NAME: "{{ deployment_name }}"
      NETWORK: "{{ network }}"
      TEST_NAME: "{{ test_name }}"
    args:
      creates: "{{ workspace }}/{{ deployment_name }}.tgz"
    register: create_output
  - name: Print ghpc blueprint information
    ansible.builtin.debug:
      var: create_output.stdout_lines
  - name: Create Infrastructure and test
    block:
    - name: Create Cluster with Terraform
      ansible.builtin.command:
        cmd: "{{ item }}"
        chdir: "{{ workspace }}/{{ deployment_name }}/primary"
      args:
        creates: "{{ workspace }}/{{ deployment_name }}/.terraform"
      environment:
        TF_IN_AUTOMATION: "TRUE"
      register: terraform_output
      with_items:
      - "terraform init"
      - "terraform apply -auto-approve -no-color"
    - name: Gather instance information
      changed_when: false
      delegate_to: localhost
      register: instances_list
      retries: 2
      delay: 60
      until: instances_list.rc == 0
      ansible.builtin.command: >-
        gcloud compute instances list
        --filter="labels.ghpc_deployment={{ deployment_name }}"
        --format='table(name,zone,id,status)'
    - name: Print instance information
      ansible.builtin.debug:
        var: instances_list.stdout_lines
    - name: Get IP of a login node - Exact name provided
      changed_when: false
      register: get_login_ip
      ansible.builtin.command: >-
        gcloud compute instances describe --zone={{ zone }} {{ login_node }}
        --format='get(networkInterfaces[0].accessConfigs[0].natIP)'
      when: '"*" not in login_node'
    - name: Set login_ip variable - Exact name provided
      ansible.builtin.set_fact:
        login_ip: "{{ get_login_ip.stdout }}"
      when: '"*" not in login_node'
    - name: Get IP of a login node - Name pattern provided
      changed_when: false
      register: get_login_ip
      ansible.builtin.command: >-
        gcloud compute instances list \
          --format='get(networkInterfaces[0].accessConfigs[0].natIP)' --limit=1 \
          --filter=NAME:{{ login_node }}
      when: '"*" in login_node'
    - name: Set login_ip variable - Name pattern provided
      ansible.builtin.set_fact:
        login_ip: "{{ get_login_ip.stdout }}"
      when: '"*" in login_node'
    - name: Print login public IP
      ansible.builtin.debug:
        var: login_ip
    - name: Get Controller IP
      changed_when: false
      register: controller_ip
      ansible.builtin.command: >-
        gcloud compute instances describe --zone={{ zone }} {{ controller_node }}
        --format='get(networkInterfaces[0].accessConfigs[0].natIP)'
    - name: Print controller public IP
      ansible.builtin.debug:
        var: controller_ip.stdout_lines

    ## Setup firewall for cloud build
    - name: Get Builder IP
      changed_when: false
      ansible.builtin.shell: >-
        dig TXT +short o-o.myaddr.l.google.com @ns1.google.com |
         awk -F'"' '{print $2}'
      register: build_ip
    - name: Create firewall rule
      register: fw_created
      changed_when: fw_created.rc == 0
      ansible.builtin.command:
        argv:
        - gcloud
        - compute
        - --project={{ project }}
        - firewall-rules
        - create
        - "{{ deployment_name }}"
        - --direction=INGRESS
        - --priority=1000
        - --network={{ network }}
        - --action=ALLOW
        - --rules=tcp:22
        - --source-ranges={{ build_ip.stdout }}
    - name: 'Add SSH Keys to OS-Login'
      register: key_created
      changed_when: key_created.rc == 0
      ansible.builtin.command:
        argv:
        - gcloud
        - compute
        - os-login
        - ssh-keys
        - add
        - --ttl
        - 2h
        - "--key-file=/builder/home/.ssh/id_rsa.pub"
    - name: Add Login node as host
      ansible.builtin.add_host:
        hostname: "{{ login_ip }}"
        groups: [remote_host]

    ## Cleanup and fail gracefully
    rescue:
    - name: Include rescue from terraform failure
      ansible.builtin.include_tasks: "tasks/rescue_terraform_failure.yml"
      vars:
        deployment_name: "{{ deployment_name }}"
        workspace: "{{ workspace }}"
        terraform_apply_stderr: "{{ terraform_output.results.1.stderr }}"

- name: Run Integration Tests
  hosts: remote_host
  gather_facts: false  # must wait until host is reachable
  ignore_unreachable: true  # ensure always block will run even if SSH fails
  tasks:
  - name: Slurm Test Block
    vars:
      ansible_ssh_private_key_file: "/builder/home/.ssh/id_rsa"
      ansible_remote_tmp: "/tmp/ghpc/"
    block:
    - name: Wait until host is reachable
      ansible.builtin.wait_for_connection:
        delay: 60
        timeout: 300
    - name: Gather facts
      ansible.builtin.setup:
    - name: Wait until Munge is active
      ansible.builtin.wait_for:
        path: /var/run/munge/munge.socket.2
        timeout: 600
    - name: Run Integration tests for HPC toolkit
      ansible.builtin.include_tasks: "{{ test }}"
      run_once: true
      vars:
        login_node: "{{ login_node }}"
        custom_vars: "{{ custom_vars }}"
      loop: "{{ post_deploy_tests }}"
      loop_control:
        loop_var: test

    ## Always cleanup, even on failure
    always:
    - name: Recover Setup Log
      become: true
      changed_when: false
      failed_when: false
      delegate_to: "{{ hostvars['localhost']['controller_ip']['stdout'] }}"
      ansible.builtin.command: cat /slurm/scripts/setup.log
      register: setup_output
    - name: Print Slurm setup.log
      ansible.builtin.debug:
        var: setup_output.stdout_lines
    - name: Recover Resume Log
      become: true
      changed_when: false
      failed_when: false
      delegate_to: "{{ hostvars['localhost']['controller_ip']['stdout'] }}"
      ansible.builtin.command: cat /var/log/slurm/resume.log
      register: resume_output
    - name: Print Slurm resume.log
      ansible.builtin.debug:
        var: resume_output.stdout_lines
    - name: Recover Suspend Log
      become: true
      changed_when: false
      failed_when: false
      delegate_to: "{{ hostvars['localhost']['controller_ip']['stdout'] }}"
      ansible.builtin.command: cat /var/log/slurm/suspend.log
      register: suspend_output
    - name: Print Slurm suspend.log
      ansible.builtin.debug:
        var: suspend_output.stdout_lines
    - name: Delete Firewall Rule
      register: fw_deleted
      changed_when: fw_deleted.rc == 0
      failed_when: false  # keep cleaning up
      run_once: true
      delegate_to: localhost
      ansible.builtin.command:
        argv:
        - gcloud
        - compute
        - firewall-rules
        - delete
        - "{{ deployment_name }}"
    - name: Tear Down Cluster
      changed_when: true  # assume something destroyed
      run_once: true
      delegate_to: localhost
      environment:
        TF_IN_AUTOMATION: "TRUE"
      ansible.builtin.command:
        cmd: terraform destroy -auto-approve
        chdir: "{{ workspace }}/{{ deployment_name }}/primary"
