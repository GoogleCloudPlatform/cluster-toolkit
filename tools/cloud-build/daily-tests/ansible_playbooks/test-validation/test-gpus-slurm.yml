# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
- name: Assert variables are defined
  ansible.builtin.assert:
    that:
    - custom_vars.gpu_partition is defined
    - custom_vars.gpu_count is defined

- name: Run nvidia-smi command
  ansible.builtin.command: srun -N 1 -p {{ custom_vars.gpu_partition }} --gpus-per-node={{ custom_vars.gpu_count }} nvidia-smi -L
  register: nvidia_smi_result
  failed_when: nvidia_smi_result.rc != 0

- name: Fail on GPU count mismatch
  ansible.builtin.fail:
    msg: "GPU count did not match {{ custom_vars.gpu_count }}"
  when: nvidia_smi_result.stdout_lines | length != custom_vars.gpu_count

- name: Print nvidia-smi output
  ansible.builtin.debug:
    msg: "{{ nvidia_smi_result.stdout }}"

- name: Run DCGM diagnostics (works without requesting GPUs)
  ansible.builtin.command: srun -N 2 -p {{ custom_vars.gpu_partition }} dcgmi diag -r 1
  register: nvidia_dcgmi_result
  failed_when: nvidia_dcgmi_result.rc != 0

- name: Print DCGM output
  ansible.builtin.debug:
    msg: "{{ nvidia_dcgmi_result.stdout }}"

- name: Verify nvidia-persistenced is active
  ansible.builtin.command: srun -N 2 -p {{ custom_vars.gpu_partition }} systemctl is-active nvidia-persistenced
  register: nvidia_persistenced_result
  failed_when: nvidia_persistenced_result.rc != 0
  when: custom_vars.test_persistenced is defined and custom_vars.test_persistenced

- name: Verify enroot/pyxis can run GPU jobs
  ansible.builtin.command: srun -N 2 -p {{ custom_vars.gpu_partition }} --gpus-per-node={{ custom_vars.gpu_count }} --container-image=nvidia/cuda:12.4.1-cudnn-runtime-rockylinux8 nvidia-smi
  register: enroot_gpu_result
  failed_when: enroot_gpu_result.rc != 0
  changed_when: false

- name: Print nvidia-smi output from enroot container
  ansible.builtin.debug:
    msg: "{{ enroot_gpu_result.stdout }}"
