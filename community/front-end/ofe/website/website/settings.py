# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
Django settings for website project.

Generated by 'django-admin startproject' using Django 3.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

# At this level all errors are fatal and long lines are a fact of life
# pylint: disable=line-too-long,broad-except

from django.core.management.utils import get_random_secret_key
from pathlib import Path
import os
import requests


def get_listen_hosts():
    ip_list = ["127.0.0.1", "localhost"]  # Start with localhost
    try:
        # Try to get IP info from Google Metadata
        metadata_headers = {"Metadata-Flavor": "Google"}
        base_url = "http://metadata.google.internal/computeMetadata/v1/instance"
        hostname_url = f"{base_url}/attributes/hostname"
        external_ip_url = (
            f"{base_url}/network-interfaces/0/access-configs/0/external-ip"
        )
        internal_ip_url = f"{base_url}/network-interfaces/0/ip"

        for url in [hostname_url, external_ip_url, internal_ip_url]:
            try:
                req = requests.get(url, headers=metadata_headers)
                if req.ok:
                    ip_list.append(req.text)
            except Exception:
                pass
    except Exception:
        pass
    return ip_list


def get_site_name():
    """Returns the GCP name of this instance, or hostname"""
    try:
        # Try to get IP info from Google Metadata
        metadata_headers = {"Metadata-Flavor": "Google"}
        base_url = (
            "http://metadata.google.internal/computeMetadata/v1/instance/"
        )
        for name_type in ["name", "hostname"]:
            try:
                url = base_url + name_type
                req = requests.get(url, headers=metadata_headers)
                if req.ok:
                    return req.text
            except Exception:
                pass
    except Exception:
        pass
    return "localhost"


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

MEDIA_ROOT = "/opt/gcluster/hpc-toolkit/community/front-end/ofe/website/startup-scripts:"

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Here we generate a secret key only on the webserver.  It is re-used if the
# FrontEnd is stopped and restarted, to ensure existing cookies still work, etc.
if os.path.isfile(".secret_key"):
    with open(".secret_key", "r") as f:
        SECRET_KEY = f.read().strip()
else:
    SECRET_KEY = get_random_secret_key()
    with open(".secret_key", "w") as f:
        f.write(SECRET_KEY)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = get_listen_hosts()

SITE_NAME = get_site_name()

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
    "django_extensions",
    "rest_framework",
    "rest_framework.authtoken",
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.google",
    "ghpcfe.apps.GHPCFEConfig",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    #    'whitenoise.middleware.WhiteNoiseMiddleware',
]

ROOT_URLCONF = "website.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "website.wsgi.application"

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = "/static/"

AUTH_USER_MODEL = "ghpcfe.User"

# Redirect to home URL after login (default redirects to /accounts/profile/)
LOGIN_REDIRECT_URL = "/"

# Allow debugging of emails from console, remove after email server set-up
EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"

# Enable authentication on APIs
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.TokenAuthentication",
    ],
}

AUTHENTICATION_BACKENDS = (
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",
)
SITE_ID = 1
LOGIN_REDIRECT_URL = "/"
SOCIALACCOUNT_PROVIDERS = {
    "google": {
        "SCOPE": [
            "profile",
            "email",
        ],
        "AUTH_PARAMS": {
            "access_type": "online",
        },
    }
}
ACCOUNT_ADAPTER = "ghpcfe.adapters.CustomAccountAdapter"
SOCIALACCOUNT_ADAPTER = "ghpcfe.adapters.CustomSocialAccountAdapter"

STATIC_ROOT = os.path.join(BASE_DIR, "static")
# STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

MESSAGE_STORAGE = "django.contrib.messages.storage.session.SessionStorage"

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "std": {
            "format": "{levelname}:{module}:{filename}:{lineno}:{message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {"level": "WARNING", "class": "logging.StreamHandler"},
        "file": {
            "class": "logging.FileHandler",
            "filename": BASE_DIR.parents[4] / "run" / "django.log",
            "formatter": "std",
        },
    },
    "loggers": {
        "": {
            "handlers": ["file", "console"],
            "level": "INFO",
        },
    },
}
