#!/bin/bash
# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -e
set -o xtrace

# shellcheck disable=SC2034
METADATA_BASE_URL="http://metadata.google.internal/computeMetadata/v1/instance"
# shellcheck disable=SC2034
ATTR_URL="$${METADATA_BASE_URL}/attributes/weka-"
NET_URL="$${METADATA_BASE_URL}/network-interfaces"

# shellcheck disable=SC1083
WEKA_MODE=$(curl --fail -s -H "Metadata-Flavor: Google" $${ATTR_URL}mode || echo -n udp)
# shellcheck disable=SC1083
WEKA_DATA_INTERFACES=$(curl --fail -s -H "Metadata-Flavor: Google" $${ATTR_URL}data_interfaces || exit 0)
# shellcheck disable=SC1083
WEKA_MGMT_INTERFACE=$(curl --fail -s -H "Metadata-Flavor: Google" $${ATTR_URL}mgmt_interface || echo -n 0)
# shellcheck disable=SC1083
WEKA_OPTIONS=$(curl --fail -s -H "Metadata-Flavor: Google" $${ATTR_URL}options || exit 0)

WEKA_OPTIONS="$${WEKA_OPTIONS:+-o $WEKA_OPTIONS}"

netmask_to_cidr () {
   c=0 
   # shellcheck disable=SC2086,SC1083
   x=0$( printf '%o' $${1//./ } )
   while [ "$x" -gt 0 ]; do
       c=$(( c + x%2 ))
       x=$(( x >> 1))
   done
   echo $c ; 
}

# detect network interface naming scheme
if [[ -e /sys/class/net/eth0 ]] ; then
    DEVICE_NAME="eth"
    DEVICE_INDEX_BASE=0
elif [[ -e /sys/class/net/ens4 ]] ; then
    DEVICE_NAME="ens"
    DEVICE_INDEX_BASE=4
else 
    echo "Can't detect device names. Both /sys/class/net/eth0 and /sys/class/net/ens4 do not exists"
    exit 1
fi

# ensure that /etc/hosts contains entry for hostname pointing to primary interface
NEW_IP=$(ip -4 -o addr show dev $DEVICE_NAME$(( DEVICE_INDEX_BASE + WEKA_MGMT_INTERFACE )) | head -n 1 | sed -e 's/^.*inet \([0-9\.]\+\)\/.*$/\1/')
if [ -n "$NEW_IP" ] ; then
    HOSTNAME=$(hostname)
    sed -i -e "/$HOSTNAME/s/^[0-9\.]\+ $HOSTNAME/$NEW_IP $HOSTNAME/" /etc/hosts
else
    echo "Failed to find primary interface address"
    ip -4 -o addr show dev $DEVICE_NAME$(( DEVICE_INDEX_BASE + WEKA_MGMT_INTERFACE ))
    exit 1
fi

# shellcheck disable=SC2154
echo "Mounting Weka ${server_ip}/${remote_mount} to ${local_mount}"
mkdir -p "${local_mount}"
service weka-agent start
if [[ $WEKA_MODE == "udp" ]] ; then
    # shellcheck disable=SC2086,SC2154,SC2086
    mount -t wekafs ${mount_options} -o net=udp $WEKA_OPTIONS "${server_ip}/${remote_mount}" "${local_mount}"

elif [[ $WEKA_MODE == "dpdk" ]] ; then
    declare -a DATA_INTERFACES
    # split WEKA_DATA_INTERFACES by comma into array
    # shellcheck disable=SC2034
    IFS=',' read -r -a DATA_INTERFACES <<< "$WEKA_DATA_INTERFACES"

    DATA_OPTIONS=""
    # shellcheck disable=SC2066
    for interface in "$${DATA_INTERFACES[@]}" ; do
        INTERFACE_IP=$(curl --fail -s -H "Metadata-Flavor: Google" "$NET_URL/$interface/ip")
        INTERFACE_MASK=$(netmask_to_cidr "$(curl --fail -s -H "Metadata-Flavor: Google" "$NET_URL/$interface/subnetmask")")
        INTERFACE_GATEWAY=$(curl --fail -s -H "Metadata-Flavor: Google" "$NET_URL/$interface/gateway")

        DATA_OPTIONS+="-o net=$DEVICE_NAME$((DEVICE_INDEX_BASE + interface))/$INTERFACE_IP/$INTERFACE_MASK/$INTERFACE_GATEWAY "
    done

    # shellcheck disable=SC2086
    mount -t wekafs \
		${mount_options} \
        -o mgmt_ip="$(curl --fail -s -H "Metadata-Flavor: Google" "$NET_URL/$WEKA_MGMT_INTERFACE/ip")" \
        $DATA_OPTIONS $WEKA_OPTIONS "${server_ip}/${remote_mount}" "${local_mount}"
else
    echo "Unknown weka:mode metadata value: $${WEKA_MODE}. Allowed values: udp and dpdk"
    exit 1
fi
