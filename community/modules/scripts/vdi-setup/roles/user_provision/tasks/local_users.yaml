# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---

- name: Check if user exists
  ansible.builtin.getent:
    database: passwd
    key: "{{ item.username }}"
  register: user_exists_check
  ignore_errors: true
  when: debug | default(false)

- name: Set user exists status for debug
  ansible.builtin.set_fact:
    user_exists_status: false
  when: debug | default(false) and user_exists_check is failed

- name: Set user exists status for debug (success case)
  ansible.builtin.set_fact:
    user_exists_status: "{{ user_exists_check.ansible_facts.getent_passwd is defined }}"
  when: debug | default(false) and user_exists_check is not failed

- name: Debug user provision for {{ item.username }}
  ansible.builtin.debug:
    msg: |
      Provisioning user {{ item.username }}:
        - user_secrets_changed: {{ user_secrets_changed }}
        - password_actually_changed: {{ password_actually_changed | default(false) }}
        - password_update_mode: {{ 'always' if password_actually_changed | default(user_secrets_changed) else 'on_create' }}
        - user_exists: {{ user_exists_status | default(false) }}
  when: debug | default(false)

- name: Provision VDI users (custom or generated passwords)
  block:

  # Create the Linux user with a hashed password
  - name: Create VDI user {{ item.username }}
    ansible.builtin.user:
      name: "{{ item.username }}"
      groups: "{{ vdi_user_group }},wheel"
      shell: /bin/bash
      create_home: yes
      append: true
      password: "{{ item.password | password_hash('sha512') }}"
      update_password: "{{ 'always' if password_actually_changed | default(user_secrets_changed) else 'on_create' }}"

  # SSH key setup
  - name: Ensure .ssh directory for {{ item.username }}
    ansible.builtin.file:
      path: "/home/{{ item.username }}/.ssh"
      state: directory
      owner: "{{ item.username }}"
      group: "{{ vdi_user_group }}"
      mode: '0700'

  - name: Generate SSH key pair for {{ item.username }}
    community.crypto.openssh_keypair:
      path: "/home/{{ item.username }}/.ssh/id_rsa"
      owner: "{{ item.username }}"
      group: "{{ vdi_user_group }}"
      mode: '0600'
    register: ssh_key

  - name: Add public key to authorized_keys for {{ item.username }}
    ansible.builtin.authorized_key:
      user: "{{ item.username }}"
      key: "{{ ssh_key.public_key }}"
      state: present

- name: Get users to remove from lock file
  ansible.builtin.set_fact:
    users_to_remove: "{{ vdi_setup_status.user_management.removed_users | default([]) }}"
  when: lock_file_stat.stat.exists

- name: Debug local user cleanup
  ansible.builtin.debug:
    msg: |
      Local user cleanup:
        - users_to_remove: {{ users_to_remove }}
  when: debug | default(false) and lock_file_stat.stat.exists

- name: Remove local user accounts
  ansible.builtin.user:
    name: "{{ item }}"
    state: absent
    remove: yes
  loop: "{{ users_to_remove }}"
  when: 
    - lock_file_stat.stat.exists
    - users_to_remove | length > 0
