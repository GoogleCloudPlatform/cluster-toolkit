# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---

# Check if this role should run
- name: Set current role for lock manager check
  ansible.builtin.set_fact:
    current_role: "user_provision"

- name: Check if user_provision role should run
  ansible.builtin.import_role:
    name: lock_manager
    tasks_from: check_lock

- name: Set role variables from lock manager facts
  ansible.builtin.set_fact:
    role_should_run: "{{ role_should_run | default(false) }}"
    is_fresh_deployment: "{{ is_fresh_deployment | default(false) }}"
    deployment_hash: "{{ current_deployment_hash | default('none') }}"
    user_hash: "{{ current_user_secrets_hash | default('none') }}"
    lock_file_stat: "{{ lock_file_stat | default({}) }}"
    vdi_setup_status: "{{ vdi_setup_status | default({}) }}"
    removed_users: "{{ removed_users | default([]) }}"
    vdi_user_group: "{{ vdi_user_group | default('vdiusers') }}"

- name: Debug role variables
  ansible.builtin.debug:
    msg: |
      User Provision role variables:
        - role_should_run: {{ role_should_run }}
        - is_fresh_deployment: {{ is_fresh_deployment }}
        - deployment_hash: {{ deployment_hash }}
        - user_hash: {{ user_hash }}
        - execution_reason: {{ 'Fresh deployment' if is_fresh_deployment else ('Hash mismatch' if not role_should_run else 'Normal role execution') }}
  when: debug

# Skip all tasks if role should not run
- name: Skip user_provision tasks if role should not run
  ansible.builtin.debug:
    msg: "Skipping user_provision role - already completed or not needed"
  when: not role_should_run

# Run user provision tasks only if needed
- name: Run user provision tasks
  block:
  - name: Ensure 'wheel' group is present
    group:
      name: wheel
      state: present

  - name: Ensure VDI user group exists
    ansible.builtin.group:
      name: "{{ vdi_user_group }}"
      state: present

  # Run local‐user provisioning if selected
  - name: Provision local users
    ansible.builtin.include_tasks: local_users.yaml
    loop: "{{ vdi_users_updated }}"
    loop_control:
      loop_var: item
    when: user_provision | lower == 'local_users'

  # Run OS Login tasks if selected
  - name: Provision OS Login users
    ansible.builtin.include_tasks: os_login.yaml
    loop: "{{ vdi_users_updated }}"
    loop_control:
      loop_var: item
    when: user_provision | lower == 'os_login'

  # =============================================================================
  # USER REMOVAL HANDLING
  # =============================================================================

  - name: Handle removed users (lock local accounts)
    block:
    - name: Lock local user accounts for removed users
      ansible.builtin.user:
        name: "{{ item }}"
        password: "!"
      loop: "{{ removed_users }}"
      when: removed_users is defined and removed_users | length > 0

    - name: Remove users from VDI group
      ansible.builtin.user:
        name: "{{ item }}"
        groups: "{{ vdi_user_group }}"
        remove: yes
      loop: "{{ removed_users }}"
      when: removed_users is defined and removed_users | length > 0

    - name: Debug user removal actions
      ansible.builtin.debug:
        msg: |
          User removal actions completed:
          {% if removed_users is defined and removed_users | length > 0 %}
          - Users locked: {{ removed_users }}
          - Local accounts locked with '!' password
          - Users removed from {{ vdi_user_group }} group
          {% else %}
          - No users to remove
          {% endif %}
      when: debug

    when: removed_users is defined and removed_users | length > 0

  when: role_should_run

# Mark role as completed
- name: Set current role for lock manager completion
  ansible.builtin.set_fact:
    current_role: "user_provision"
    role_completed: true
  when: role_should_run

- name: Mark user_provision role as completed
  ansible.builtin.import_role:
    name: lock_manager
    tasks_from: create_lock
  when: role_should_run
