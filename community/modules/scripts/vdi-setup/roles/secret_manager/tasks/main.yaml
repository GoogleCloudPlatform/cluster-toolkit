# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---

# Check if this role should run
- name: Set current role for lock manager check
  ansible.builtin.set_fact:
    current_role: "secret_manager"

- name: Check if secret_manager role should run
  ansible.builtin.import_role:
    name: lock_manager
    tasks_from: check_lock
  register: lock_check_result

- name: Set role_should_run from lock check result
  ansible.builtin.set_fact:
    role_should_run: "{{ lock_check_result.ansible_facts.role_should_run | default(true) }}"

# Skip all tasks if role should not run
- name: Skip secret_manager tasks if role should not run
  ansible.builtin.debug:
    msg: "Skipping secret_manager role - already completed or not needed"
  when: not role_should_run

# Run secret manager tasks only if needed
- name: Run secret manager tasks
  block:
  # General secret handling
  - name: Generate random database password
    ansible.builtin.set_fact:
      database_password: "{{ lookup('password', '/dev/null length=32 chars=ascii_letters,digits') }}"

  - name: Generate random webapp admin password
    ansible.builtin.set_fact:
      webapp_admin_password: "{{ lookup('password', '/dev/null length=32 chars=ascii_letters,digits') }}"

  - name: Compute Webapp admin password hash to save to Webapp server
    ansible.builtin.set_fact:
      webapp_admin_hash: "{{ webapp_admin_password | hash('sha256') | upper }}"

  - name: Get access token for Secret Manager API
    ansible.builtin.uri:
      url: "http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/default/token"
      method: GET
      headers:
        Metadata-Flavor: Google
      return_content: true
    register: access_token_result

  - name: Create a GCP secret for webapp server login
    ansible.builtin.uri:
      url: "https://secretmanager.googleapis.com/v1/projects/{{ secret_project }}/secrets?secretId=webapp-server-password-{{ deployment_name }}"
      method: POST
      headers:
        Authorization: "Bearer {{ access_token_result.json.access_token }}"
        Content-Type: "application/json"
      body_format: json
      body:
        replication:
          automatic: {}
      status_code: [200, 409]  # 409 = already exists
    register: webapp_secret_create

  - name: Add webapp password version to secret
    ansible.builtin.uri:
      url: "https://secretmanager.googleapis.com/v1/projects/{{ secret_project }}/secrets/webapp-server-password-{{ deployment_name }}:addVersion"
      method: POST
      headers:
        Authorization: "Bearer {{ access_token_result.json.access_token }}"
        Content-Type: "application/json"
      body_format: json
      body:
        payload:
          data: "{{ webapp_admin_password | b64encode }}"
    register: webapp_secret

  - name: Create a GCP secret for database password
    ansible.builtin.uri:
      url: "https://secretmanager.googleapis.com/v1/projects/{{ secret_project }}/secrets?secretId=db-password-{{ deployment_name }}"
      method: POST
      headers:
        Authorization: "Bearer {{ access_token_result.json.access_token }}"
        Content-Type: "application/json"
      body_format: json
      body:
        replication:
          automatic: {}
      status_code: [200, 409]  # 409 = already exists
    register: database_secret_create

  - name: Add database password version to secret
    ansible.builtin.uri:
      url: "https://secretmanager.googleapis.com/v1/projects/{{ secret_project }}/secrets/db-password-{{ deployment_name }}:addVersion"
      method: POST
      headers:
        Authorization: "Bearer {{ access_token_result.json.access_token }}"
        Content-Type: "application/json"
      body_format: json
      body:
        payload:
          data: "{{ database_password | b64encode }}"
    register: database_secret

  # Per-user secret handling
  - name: Generate per-user secrets and enrich list
    include_tasks: user_secret_tasks.yaml
    loop: "{{ vdi_users }}"
    loop_control:
      loop_var: item

  - name: Set enriched vdi_users_updated variable
    ansible.builtin.set_fact:
      vdi_users_updated: "{{ vdi_users_updated }}"
    when: vdi_users_updated is defined

  when: role_should_run

# Mark role as completed
- name: Set current role for lock manager completion
  ansible.builtin.set_fact:
    current_role: "secret_manager"
    role_completed: true
  when: role_should_run

- name: Mark secret_manager role as completed
  ansible.builtin.import_role:
    name: lock_manager
    tasks_from: create_lock
  when: role_should_run
