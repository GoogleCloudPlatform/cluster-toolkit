# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---

- name: Ensure PostgreSQL data & init directories exist
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: root
    mode: '0755'
  loop:
  - /opt/guacamole-db/data
  - /opt/guacamole-db/initdb

- name: Check Docker service status
  ansible.builtin.service_facts:

- name: Ensure Docker service is running
  ansible.builtin.service:
    name: docker
    state: started
    enabled: yes
  register: docker_service_status

- name: Wait for Docker daemon to be ready
  ansible.builtin.wait_for:
    path: /var/run/docker.sock
    timeout: 30

- name: Test Docker connectivity
  ansible.builtin.command: docker version
  register: docker_test
  retries: 5
  delay: 2
  until: docker_test.rc == 0

- name: Enable pgcrypto extension for initdb
  ansible.builtin.copy:
    dest: /opt/guacamole-db/initdb/00-enable-pgcrypto.sql
    owner: root
    group: root
    mode: '0644'
    content: |
      -- Make digest(), hmac(), etc. available
      CREATE EXTENSION IF NOT EXISTS pgcrypto;

- name: Template per-user Guacamole user SQL
  ansible.builtin.template:
    src: user_bootstrap.sql.j2
    dest: "/opt/guacamole-db/initdb/02-{{ item.username }}_user.sql"
    owner: root
    group: root
    mode: '0644'
  loop: "{{ vdi_users_updated }}"
  loop_control:
    loop_var: item
  vars:
    username: "{{ item.username }}"
    vdi_password: "{{ item.password }}"

- name: Template per-user SQL for Guacamole connections
  ansible.builtin.template:
    src: connection_bootstrap.sql.j2
    dest: "/opt/guacamole-db/initdb/03-{{ item.username }}_connection.sql"
    owner: root
    group: root
    mode: '0644'
  loop: "{{ vdi_users_updated }}"
  loop_control:
    loop_var: item
  vars:
    port: "{{ item.port }}"
    username: "{{ item.username }}"
    vnc_password: "{{ item.vncserver_password }}"

- name: Generate combined initdb.sql
  ansible.builtin.shell: |
    docker run --rm \
      -v /opt/guacamole-db/initdb:/opt/guacamole-db/initdb \
      guacamole/guacamole:latest \
      /opt/guacamole/bin/initdb.sh --postgresql \
      > /opt/guacamole-db/initdb/01-initdb.sql
  args:
    creates: /opt/guacamole-db/initdb/01-initdb.sql

- name: Update guacadmin password hash in 01-initdb.sql
  ansible.builtin.replace:
    path: /opt/guacamole-db/initdb/01-initdb.sql
    regexp: "decode\\('CA458A7D494E3BE824F5E1E175A1556C0F8EEF2C2D7DF3633BEC4A29C4411960', 'hex'\\)"
    replace: "decode('{{ webapp_admin_hash }}', 'hex')"

- name: Remove salt from guacadmin in 01-initdb.sql
  ansible.builtin.replace:
    path: /opt/guacamole-db/initdb/01-initdb.sql
    regexp: "decode\\('FE24ADC5E11E2B25288D1704ABE67A79E342ECC26064CE69C5B3177795A82264', 'hex'\\)"
    replace: "NULL"

- name: Pull required Docker images
  ansible.builtin.command: docker pull {{ item }}
  loop:
  - postgres:latest
  - guacamole/guacd:latest
  - guacamole/guacamole:latest

- name: Create a dedicated Docker network
  ansible.builtin.command: docker network create guac_net
  register: network_create
  failed_when:
  - network_create.rc != 0
  - "'already exists' not in network_create.stderr"

- name: Start Guacamole PostgreSQL container
  ansible.builtin.command: >
    docker run -d --name guac_db --network guac_net
    -e POSTGRES_USER=guacamole_db
    -e POSTGRES_PASSWORD={{ database_password }}
    -e POSTGRES_DB=guacamole_db
    -v /opt/guacamole-db/data:/var/lib/postgresql/data
    -v /opt/guacamole-db/initdb:/docker-entrypoint-initdb.d
    --restart always
    postgres:latest
  register: postgres_start
  failed_when:
  - postgres_start.rc != 0
  - "'already in use' not in postgres_start.stderr"

- name: Wait for PostgreSQL container to be ready
  ansible.builtin.wait_for:
    host: 127.0.0.1
    port: 5432
    delay: 2
    timeout: 60
  ignore_errors: true

- name: Wait for PostgreSQL via Docker exec
  ansible.builtin.command: docker exec guac_db pg_isready -U guacamole_db
  register: postgres_ready
  until: postgres_ready.rc == 0
  retries: 30
  delay: 2

- name: Start guacd container
  ansible.builtin.command: >
    docker run -d --name guacd --network guac_net
    -p 4822:4822
    --restart always
    guacamole/guacd:latest
  register: guacd_start
  failed_when:
  - guacd_start.rc != 0
  - "'already in use' not in guacd_start.stderr"

- name: Start Guacamole webapp container
  ansible.builtin.command: >
    docker run -d --name guac_app --network guac_net
    -p {{ vdi_webapp_port }}:8080
    -e POSTGRES_HOSTNAME=guac_db
    -e POSTGRES_PORT=5432
    -e POSTGRES_DATABASE=guacamole_db
    -e POSTGRES_USER=guacamole_db
    -e POSTGRES_PASSWORD={{ database_password }}
    -e POSTGRES_AUTO_CREATE_ACCOUNTS=true
    -e GUACD_HOSTNAME=guacd
    -e GUACD_PORT=4822
    --restart always
    guacamole/guacamole:latest
  register: guac_app_start
  failed_when:
  - guac_app_start.rc != 0
  - "'already in use' not in guac_app_start.stderr"

- name: Debug container status before waiting for Guacamole
  ansible.builtin.command: docker ps
  register: container_status
  changed_when: false

- name: Show container status
  ansible.builtin.debug:
    msg: "{{ container_status.stdout }}"

- name: Wait for Guacamole HTTP endpoint
  ansible.builtin.wait_for:
    host: 127.0.0.1
    port: "{{ vdi_webapp_port }}"
    delay: 2
    timeout: 60

- name: Check Guacamole UI is up
  ansible.builtin.uri:
    url: "http://localhost:{{ vdi_webapp_port }}/guacamole/"
    status_code: 200
    return_content: no
  register: guac_health
  until: guac_health.status == 200
  retries: 10
  delay: 3

- name: Obtain Guacamole API token to verify login
  ansible.builtin.uri:
    url: "http://localhost:{{ vdi_webapp_port }}/guacamole/api/tokens"
    method: POST
    body_format: form-urlencoded
    body:
      username: "guacadmin"
      password: "{{ webapp_admin_password }}"
    return_content: yes
  register: guac_api
  until:
  - guac_api.status == 200
  - guac_api.json.authToken is defined
  retries: 10
  delay: 3

- name: Remove bootstrap SQL files unless debug is enabled
  ansible.builtin.file:
    path: /opt/guacamole-db/initdb
    state: absent
  when: not debug | default(false)
