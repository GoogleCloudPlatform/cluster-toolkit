# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
- name: Backup existing lock file
  ansible.builtin.copy:
    src: /opt/vdi-setup/.vdi-lock.yaml
    dest: /opt/vdi-setup/.vdi-lock.yaml.backup
    remote_src: true
  when: lock_file_stat.stat.exists
  ignore_errors: true

- name: Debug create lock operation
  ansible.builtin.debug:
    msg: "Creating/updating lock file for role: {{ current_role }}"

- name: Check if lock file exists
  ansible.builtin.stat:
    path: /opt/vdi-setup/.vdi-lock.yaml
  register: lock_file_stat

- name: Debug lock file existence
  ansible.builtin.debug:
    msg: "Lock file exists: {{ lock_file_stat.stat.exists }}"
  when: debug

- name: Create initial lock file structure
  ansible.builtin.template:
    src: lock_file.yaml.j2
    dest: /opt/vdi-setup/.vdi-lock.yaml
    mode: '0644'
  when: not lock_file_stat.stat.exists
  register: lock_file_creation

- name: Debug lock file creation
  ansible.builtin.debug:
    msg: "Lock file created: {{ lock_file_creation.changed }}"
  when: debug and not lock_file_stat.stat.exists

- name: Set fresh deployment flag (only when lock file is created)
  ansible.builtin.set_fact:
    is_fresh_deployment: true
  when: lock_file_creation.changed

- name: Load existing lock file data
  ansible.builtin.include_vars:
    file: /opt/vdi-setup/.vdi-lock.yaml
  when: lock_file_stat.stat.exists or lock_file_creation.changed
  register: existing_lock_data

- name: Get current lock data
  ansible.builtin.set_fact:
    current_lock_data: "{{ existing_lock_data.ansible_facts.vdi_setup_status | default({}) }}"
  when: lock_file_stat.stat.exists or lock_file_creation.changed

# Update hashes and configuration when lock manager runs independently OR when secret_manager provides admin hash
- name: Update deployment hash (independent run only)
  ansible.builtin.set_fact:
    current_lock_data: "{{ current_lock_data | combine({'deployment_hash': current_deployment_hash}) }}"
  when:
  - lock_file_stat.stat.exists or lock_file_creation.changed
  - current_role == 'lock_manager'

- name: Update user hash (independent run only)
  ansible.builtin.set_fact:
    current_lock_data: "{{ current_lock_data | combine({'user_hash': current_user_secrets_hash}) }}"
  when:
  - lock_file_stat.stat.exists or lock_file_creation.changed
  - current_role == 'lock_manager'

- name: Prepare configuration updates
  ansible.builtin.set_fact:
    config_updates:
      current_users: "{{ vdi_users | map(attribute='username') | list }}"
      user_ports: "{{ vdi_users | items2dict(key_name='username', value_name='port') }}"
      webapp_port: "{{ vdi_webapp_port }}"
      vdi_resolution: "{{ vdi_resolution }}"
      vdi_resolution_locked: "{{ vdi_resolution_locked }}"
      vdi_user_group: "{{ vdi_user_group }}"
      webapp_admin_hash: "{{ webapp_admin_hash }}"
      last_updated: "{{ ansible_date_time.iso8601 }}"
  when:
  - lock_file_stat.stat.exists or lock_file_creation.changed
  - current_role == 'lock_manager'

- name: Update configuration data (independent run only)
  ansible.builtin.set_fact:
    current_lock_data: "{{ current_lock_data | combine(config_updates) }}"
  when:
  - lock_file_stat.stat.exists or lock_file_creation.changed
  - current_role == 'lock_manager'

# Update admin hash when secret_manager role provides it
- name: Update admin hash from secret_manager
  ansible.builtin.set_fact:
    current_lock_data: "{{ current_lock_data | combine({'webapp_admin_hash': webapp_admin_hash}) }}"
  when:
  - lock_file_stat.stat.exists or lock_file_creation.changed
  - current_role == 'secret_manager'
  - webapp_admin_hash is defined

- name: Update role completion status
  ansible.builtin.set_fact:
    current_completed_roles: "{{ current_lock_data.completed_roles | default({}) }}"
    updated_completed_roles: "{{ (current_lock_data.completed_roles | default({})) | combine({current_role: role_completed | default(false)}) }}"
  when: lock_file_stat.stat.exists or lock_file_creation.changed

- name: Update lock data with completed roles
  ansible.builtin.set_fact:
    current_lock_data: "{{ current_lock_data | combine({'completed_roles': updated_completed_roles}) }}"
  when: lock_file_stat.stat.exists or lock_file_creation.changed

- name: Write updated lock file
  ansible.builtin.copy:
    content: |
      vdi_setup_status:
      {{ current_lock_data | to_nice_yaml(indent=2) | indent(2, first=true) }}
    dest: /opt/vdi-setup/.vdi-lock.yaml
    mode: '0644'
  when: lock_file_stat.stat.exists or lock_file_creation.changed
  register: lock_file_write

- name: Debug VM metadata update
  ansible.builtin.debug:
    msg: |
      VM metadata update info:
        - hostname: {{ ansible_hostname }}
        - zone: {{ zone }}
        - lock_file_changed: {{ lock_file_write.changed }}
  when: debug

- name: Get lock file content as base64
  ansible.builtin.shell: cat /opt/vdi-setup/.vdi-lock.yaml | base64 -w 0
  register: lock_file_base64
  when: lock_file_write.changed

- name: Add VDI lock file content to VM metadata (with retry)
  ansible.builtin.command: >
    gcloud compute instances add-metadata {{ ansible_hostname }}
    --metadata vdi-lock-content="{{ lock_file_base64.stdout }}"
    --zone={{ zone }}
  when:
  - lock_file_write.changed
  - lock_file_base64.rc == 0
  register: metadata_update
  retries: 3
  delay: 2
  until: metadata_update.rc == 0
  changed_when: metadata_update.rc == 0
  failed_when:
  - metadata_update.rc != 0
  - "'already exists' not in metadata_update.stderr | default('')"

- name: Debug lock file write
  ansible.builtin.debug:
    msg: "Lock file written: {{ lock_file_write.changed }}"
  when: debug

- name: Verify lock file integrity
  ansible.builtin.command: python3 -c "import yaml; yaml.safe_load(open('/opt/vdi-setup/.vdi-lock.yaml'))"
  register: lock_file_validation
  changed_when: false

- name: Debug lock file validation
  ansible.builtin.debug:
    msg: "Lock file validation: {{ lock_file_validation.rc == 0 }}"
  when: debug

- name: Debug lock manager completion
  ansible.builtin.debug:
    msg: "Lock manager role completed successfully"
  when: debug

- name: Fail if lock file is invalid
  ansible.builtin.fail:
    msg: "Lock file validation failed: {{ lock_file_validation.stderr }}"
  when: lock_file_validation.rc != 0
