#!/bin/bash

# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# VDI Configuration Monitor
# Monitors the VDI lock file for changes and triggers re-configuration

LOCK_FILE="/opt/vdi-setup/.vdi-lock.yaml"
CONFIG_HASH_FILE="/opt/vdi-setup/.config-hash"
MONITOR_LOG="/var/log/vdi-monitor.log"
ANSIBLE_LOG="/var/log/ansible-vdi-reconfig.log"
BUCKET_NAME="{{ vdi_bucket_name }}"
VDI_SETUP_DIR="/opt/vdi-setup"

# Function to log messages
log_message() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$MONITOR_LOG"
}

# Function to sync files from bucket
sync_from_bucket() {
    log_message "Syncing files from bucket: gs://$BUCKET_NAME"
    
    # Create temporary directory for sync
    local temp_dir=$(mktemp -d)
    
    # Download files from bucket
    if gsutil -m rsync -r "gs://$BUCKET_NAME/" "$temp_dir/"; then
        log_message "Successfully downloaded files from bucket"
        
        # Copy files to VDI setup directory
        if [[ -d "$temp_dir/roles" ]]; then
            cp -r "$temp_dir/roles" "$VDI_SETUP_DIR/"
            log_message "Updated roles directory"
        fi
        
        if [[ -f "$temp_dir/install.yaml" ]]; then
            cp "$temp_dir/install.yaml" "$VDI_SETUP_DIR/"
            log_message "Updated install.yaml"
        fi
        
        if [[ -f "$temp_dir/vars.yaml" ]]; then
            cp "$temp_dir/vars.yaml" "$VDI_SETUP_DIR/"
            log_message "Updated vars.yaml"
        fi
        
        # Clean up temporary directory
        rm -rf "$temp_dir"
        return 0
    else
        log_message "ERROR: Failed to sync files from bucket"
        rm -rf "$temp_dir"
        return 1
    fi
}

# Function to get current configuration hash
get_config_hash() {
    if [[ -f "$LOCK_FILE" ]]; then
        # Extract deployment_hash and user_secrets_hash from lock file
        deployment_hash=$(grep "deployment_hash:" "$LOCK_FILE" | awk '{print $2}' | tr -d '"')
        user_secrets_hash=$(grep "user_secrets_hash:" "$LOCK_FILE" | awk '{print $2}' | tr -d '"')
        echo "${deployment_hash}-${user_secrets_hash}"
    else
        echo "no-lock-file"
    fi
}

# Function to check if configuration has changed
check_config_changed() {
    local current_hash=$(get_config_hash)
    local stored_hash=""
    
    if [[ -f "$CONFIG_HASH_FILE" ]]; then
        stored_hash=$(cat "$CONFIG_HASH_FILE")
    fi
    
    if [[ "$current_hash" != "$stored_hash" ]]; then
        log_message "Configuration change detected: $stored_hash -> $current_hash"
        return 0
    else
        return 1
    fi
}

# Function to update stored hash
update_stored_hash() {
    local current_hash=$(get_config_hash)
    echo "$current_hash" > "$CONFIG_HASH_FILE"
    log_message "Updated stored hash: $current_hash"
}

# Function to trigger VDI re-configuration
trigger_reconfig() {
    log_message "Triggering VDI re-configuration"
    
    # First, sync latest files from bucket
    if ! sync_from_bucket; then
        log_message "WARNING: Failed to sync from bucket, proceeding with local files"
    fi
    
    # Change to VDI setup directory
    cd "$VDI_SETUP_DIR" || {
        log_message "ERROR: Cannot change to $VDI_SETUP_DIR"
        return 1
    }
    
    # Run Ansible playbook with re-configuration
    ansible-playbook install.yaml \
        --connection=local \
        --inventory=localhost, \
        --limit=localhost \
        --extra-vars="force_rerun=true" \
        --extra-vars="debug=true" \
        >> "$ANSIBLE_LOG" 2>&1
    
    local exit_code=$?
    if [[ $exit_code -eq 0 ]]; then
        log_message "VDI re-configuration completed successfully"
        update_stored_hash
    else
        log_message "ERROR: VDI re-configuration failed with exit code $exit_code"
        log_message "Check $ANSIBLE_LOG for details"
    fi
    
    return $exit_code
}

# Main monitoring loop
main() {
    log_message "VDI Configuration Monitor started"
    
    # Initialize stored hash if not exists
    if [[ ! -f "$CONFIG_HASH_FILE" ]]; then
        update_stored_hash
    fi
    
    # Main monitoring loop
    while true; do
        if check_config_changed; then
            trigger_reconfig
        fi
        
        # Sleep for 60 seconds before next check
        sleep 60
    done
}

# Test mode function
test_mode() {
    log_message "VDI Configuration Monitor - Test Mode"
    log_message "Testing bucket sync functionality..."
    
    if sync_from_bucket; then
        log_message "SUCCESS: Bucket sync test passed"
        exit 0
    else
        log_message "FAILED: Bucket sync test failed"
        exit 1
    fi
}

# Handle script termination
trap 'log_message "VDI Configuration Monitor stopped"; exit 0' SIGTERM SIGINT

# Check for test mode
if [[ "${1:-}" == "--test" ]]; then
    test_mode
fi

# Start monitoring
main
