# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
- name: Set Ubuntu specific variables
  ansible.builtin.set_fact:
    gui_packages: ['xfce4', 'xserver-xorg-core']
    vnc_pkg: >-
      {%- if vnc_flavor|lower == 'tigervnc' -%}
      tigervnc-standalone-server
      {%- elif vnc_flavor|lower == 'tightvnc' -%}
      tightvnc-standalone-server
      {%- else -%}
      tightvnc-standalone-server
      {%- endif %}
    xorg_dev_packages: ['pkg-config', 'xserver-xorg-dev', 'libx11-dev', 'libxext-dev', 'libglvnd-dev']

- name: Install desktop prerequisites & VNC package (Ubuntu)
  ansible.builtin.package:
    name: "{{ gui_packages + [vnc_pkg] + xorg_dev_packages }}"
    state: present
  retries: 10
  delay: 3

- name: Install kernel headers for running kernel (Ubuntu)
  ansible.builtin.package:
    name: "linux-headers-{{ ansible_kernel }}"
    state: present
  retries: 10
  delay: 3

# GCC version detection and installation for NVIDIA driver compatibility
- name: Get kernel build GCC version
  ansible.builtin.shell: cat /proc/version | grep -o 'gcc-[0-9]*' | head -1
  register: kernel_gcc_version
  changed_when: false

- name: Extract GCC major version from kernel
  ansible.builtin.set_fact:
    required_gcc_version: "{{ kernel_gcc_version.stdout.split('-')[1] if kernel_gcc_version.stdout else '11' }}"

- name: Debug kernel GCC version extraction
  ansible.builtin.debug:
    msg:
    - "Raw kernel GCC version: {{ kernel_gcc_version.stdout }}"
    - "Extracted required GCC version: {{ required_gcc_version }}"

- name: Get current GCC version
  ansible.builtin.shell: gcc --version | head -1 | grep -o '[0-9]*\.[0-9]*' | head -1
  register: current_gcc_version
  changed_when: false

- name: Extract current GCC major version
  ansible.builtin.set_fact:
    current_gcc_major: "{{ current_gcc_version.stdout.split('.')[0] if current_gcc_version.stdout else '11' }}"

- name: Debug current GCC version extraction
  ansible.builtin.debug:
    msg:
    - "Raw current GCC version: {{ current_gcc_version.stdout }}"
    - "Extracted current GCC major: {{ current_gcc_major }}"

- name: Debug GCC version information
  ansible.builtin.debug:
    msg:
    - "Kernel was built with GCC {{ required_gcc_version }}"
    - "Current system GCC version: {{ current_gcc_major }}"
    - "GCC update needed: {{ required_gcc_version != current_gcc_major }}"

- name: Install required GCC version if different from current
  block:
  - name: Install GCC {{ required_gcc_version }}
    ansible.builtin.package:
      name: "gcc-{{ required_gcc_version }}"
      state: present
    retries: 10
    delay: 3

  - name: Install G++ {{ required_gcc_version }}
    ansible.builtin.package:
      name: "g++-{{ required_gcc_version }}"
      state: present
    retries: 10
    delay: 3

  - name: Set GCC {{ required_gcc_version }} as default
    ansible.builtin.alternatives:
      name: gcc
      path: "/usr/bin/gcc-{{ required_gcc_version }}"
      priority: "{{ required_gcc_version }}"
      link: /usr/bin/gcc

  - name: Set G++ {{ required_gcc_version }} as default
    ansible.builtin.alternatives:
      name: g++
      path: "/usr/bin/g++-{{ required_gcc_version }}"
      priority: "{{ required_gcc_version }}"
      link: /usr/bin/g++

  - name: Verify GCC version after update
    ansible.builtin.shell: gcc --version | head -1
    register: updated_gcc_version
    changed_when: false

  - name: Debug updated GCC version
    ansible.builtin.debug:
      msg: "Updated GCC version: {{ updated_gcc_version.stdout }}"

  - name: Verify G++ version after update
    ansible.builtin.shell: g++ --version | head -1
    register: updated_gpp_version
    changed_when: false

  - name: Debug updated G++ version
    ansible.builtin.debug:
      msg: "Updated G++ version: {{ updated_gpp_version.stdout }}"

  - name: Verify alternatives are set correctly
    ansible.builtin.shell: update-alternatives --display gcc
    register: gcc_alternatives_check
    changed_when: false

  - name: Debug GCC alternatives status
    ansible.builtin.debug:
      msg: "GCC alternatives status: {{ gcc_alternatives_check.stdout }}"

  when: required_gcc_version != current_gcc_major
